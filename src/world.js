import { Model } from './model.js';
import { Uid } from './uid.js';

export class World {
  constructor({
    atoms,
    relations,
    invariants,
    observers,
    transitors
  }, _events=[], _parent) {
    this._atoms = atoms;
    this._relations = relations;
    this._invariants = invariants;
    this._observers = observers;
    this._transitors = transitors;

    if (_parent) {
      this._parent = _parent;
      this._model = null;
    } else {
      this._model = new Model({
        atoms: atoms,
        relations: relations,
        invariants: invariants
      })
      this._model.freeze();
    }
    this._observers = observers;
    this._events = _events;
    this._uid = Uid.next();
  }

  // accessor methods
  get uid() { return this._uid; }
  // end accessor methods

  validateAction(action) {
    let permitted = true;
    let messages = [];
    this._transitors.forEach((transitor) => {
      let result = transitor.test(action, this)
      permitted &= result[0];
      messages.push(result[1]);
    });
    return [permitted, messages];
  }

  applyAction(action) {
    let validationResult = this.validateAction(action);
    let permitted = validationResult[0];
    let messages = validationResult[1];
    if (!permitted) {
      action.fail(this, messages);
      return this;
    } else {
      let nextWorld = this.event(action.event);
      action.succeed(nextWorld);
      return nextWorld;
    }
  }

  check(relationName, ...atoms) {
    if (!this._model) {
      this._model = this._parent._model;
    }
    this._applyEvents();
    return this._model.check(relationName, ...atoms);
  }

  which(relationName, subject) {
    if (!this._model) {
      this._model = this._parent._model;
    }
    this._applyEvents();
    return this._model.which(relationName, subject);
  }

  _applyEvents(triggeredObservers=new Set()) {
    if (this._parent) {
      this._parent._applyEvents();
    }
    if (!this._model) {
      this._model = this._parent._model;
    }
    if (this._model.frozen) {
      this._model = this._model.clone();
    }

    let nextEvents = []; // queue of events generated by observers
    this._events.forEach((event) => {
      let observerOldValues = this._observers.map((o) => o.check(this._model));
      this._model.assert(event);
      let observerEffects = this._observers.map((o, i) => {
        let effect = o.consider(this._model, observerOldValues[i]);
        if (effect && triggeredObservers.has(o)) {
          throw "Observer triggered twice!";
        } else if (effect) {
          triggeredObservers.add(o);
          nextEvents = nextEvents.concat(effect.events);
        }
      });
    });

    this._events = nextEvents;
    if (nextEvents.length == 0) {
      this._model.freeze();
    } else {
      this._applyEvents(triggeredObservers);
    }
  }

  event(event) {
    return new World({
      atoms: this._atoms,
      relations: this._relations,
      invariants: this._invariants,
      observers: this._observers,
      transitors: this._transitors
    }, [event], this);
  }
}
