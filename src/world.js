export class World {
  constructor(model, observers=[], events=[]) {
    this._model = model;
    this._model.freeze();
    this._observers = observers;
    this._events = events;
  }

  check(relationName, ...atoms) {
    if (this._events.length > 0) {
      this._applyEvents();
    }
    return this._model.check(relationName, ...atoms);
  }

  _applyEvents(triggeredObservers=new Set()) {
    let nextEvents = []; // queue of events generated by observers
    if (this._model.frozen) {
      this._model = this._model.clone();
    }

    this._events.forEach((event) => {
      let observerOldValues = this._observers.map((o) => o.check(this._model));
      this._model.assert(event);
      let observerEffects = this._observers.map((o, i) => {
        let effect = o.consider(this._model, observerOldValues[i]);
        if (effect && triggeredObservers.has(o)) {
          throw "Observer triggered twice!";
        } else if (effect) {
          triggeredObservers.add(o);
          nextEvents.concat(effect.events);
        }
      });
    });

    this._events = nextEvents;
    if (nextEvents.length == 0) {
      this._model.freeze();
    } else {
      this._applyEvents(triggeredObservers);
    }
  }

  event(event) {
    return new World(this._model, this._observers, [...this._events, event]);
  }
}
